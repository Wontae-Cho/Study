package com.bit.thread;

public class Ex01ThreadUseInherit extends Thread {
/*	쓰레드 ?
 *  여러개의 작업을 동시에 진행할 수 있도록 해주는 것 .
 *  
 *  기본적으로 단일작업
 *  쓰레드 이전까지 해온 것들은 전부 단일 스레드 작업.
 *  멀티코어가 나오면서 쓰레드가 나온것이 아니라, 이전에도 다중작업은 가능했다.
 *  
 *  cpu는 단일연산만 처리가능한데 어떻게 멀티작업이 가능했을까 ?
 *  듀얼코어,쿼드코어. 등 어떻게 시피유 하나에 여러개의 코어가 가능할까 ?
 *  	// 업무를 시간(컴퓨터기준)으로 나눠서 조금씩 함으로써 멀티작업을 처리했다.
 *  	// 작업관리자를 켜보면 몇개의 프로그램이 돌아가고 있는지 알 수 있다. 
 *  	// 돌아간다는 것은 작업을 처리한다는 의미.
 *  그렇다면 작업을 멈췄다가 다시 시작했을 때 이전의 데이터를 가지고 있어야한다.
 *  그리고 그 작업들을 관리해줄 것들이 필요한데 그것들의 대표적인 예가 운영체제이다.
 *  운영체제에 따라서 멀티작업이 가능할수도, 불가능할수도 있다. 
 *  거의 대부분의 운영체제가 멀티작업을 하는데 dos같은 경우에는 멀티작업이 불가능하다고 봐야한다.
 *  
 *   이미 운영체제에서 다중작업(프로세스)이 가능한데 왜 쓰레드가 만들어졌을까?
 *   	// 내가 만든 프로그램을 내가 핸들링하기를 원하는데 기존 운영체제를 이용해서는 그것이 원활치 않기 때문이다.
 *   	// 프로세스를 늘려서 처리하면 되는데 그런것에는 치명적인 문제점이 있다. => 블루스크린.
 *   	// 블루스크린 = 프로세스의 충돌. 작업중인 프로세스를 내려놓고 다른 프로세스를 올려야하는데 작업중인 프로세스를 내려놓지 못하는 상황에서.
 *   쓰레드는 운영체제에서 하나의 프로세스를 받아서 그안에 프로세스를 구성한 것이라고 볼 수 있다. 즉 주체가 내가 됨.
 */
	public static void main(String[] args) {
		// 쓰레드를 상속받음. 쓰레드를 생성하고 돌리는 방법 1.
		// 상속받은 쓰레드를 사용하기 위해선 내 객체를 생성해야함.
		// 따라서 참조변수 me에게 쓰레드를 사용할 수 있는 객체를 만듬.
		System.out.println("메인시작");
		Ex01ThreadUseInherit me = new Ex01ThreadUseInherit();
		Ex01ThreadUseInherit you = new Ex01ThreadUseInherit();
		me.start();
		you.start();
		System.out.println("메인종료");
	}
	//오버라이드 = 쓰레드에 구현된 메서드.
	public void run(){	//새로운 작업이 수행할 메인.
		System.out.println("새로운 스레드 시작");
		int sum=0;
		for(int i=0; i<10000000; i++){
			sum+=i;
		}
		System.out.println("sum= "+sum);
		System.out.println("새로운 스레드 종료");
	}

}
