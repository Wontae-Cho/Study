건축과 프로그래밍을 비교했을 때,

            건축 | 프로그래밍
        요구분석 | 요구분석 
- 모델링---------|------- 소프트웨어의 경우 가상의 산물이기 때문에 모델링이 어렵다.
		 |	  따라서 프로그램이 어떻게 될 것인지를 예상한 시나리오를 만든다.
		 |	  실패한 시나리오(유효성검사에 실패하는 등)도 포함되어야 한다.
		 |	  또한 시나리오대로 해도되는지 확인하는 프로그램 감리의 작업도 포함.
- 조감도-------- |------- USECASE = 시나리오의 축소모델, 약속된 심볼을 이용함.
		 | 	- USECASE가 너무 간략하기에 USECASE 상세명세서 또한 존재함.
		 |	- 요구명세서 = 어떠한 요구가 있었는지 확인하고 계약하는 것에 포함됨.
		 |	(요구명세서,USECASE,시나리오는 각각의 개인프로젝트)
-----------------------------------------------------------------------------------------------------
설 계 --|------- 설계 - 설계도( = 자율양식으로 작성.
	|		FrontEnd - 메뉴설계도, 스토리보드
	|		BackEnd - 클래스 다이어그램(클래스를 어떻게 구성할 것인지) 진행흐름표시X,정적
	|			- 시퀀스 다이어그램(진행흐름, 시간의 흐름에 따라)		동적
	|		DataBase - ER-D (물리/논리)
	|		)
시 공 --|------- 구현(코딩)

※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ 참고사항 ※ ※ ※ ※ ※ ※ ※ ※ ※ ※ ※
//// + 인터뷰 시나리오(인터뷰 질의서) ? 
//// 원본파일과 PDF파일로 준비.
//// DB작성시 날짜를 기입할 경우, 구체적인 날짜가 아닌 것으로 입력. ex_) 2019-xx-xx, xxxx/xx/xx 등
//// 누가 제출했는지 꼭 ! 명세. 소속과 이름 명세 필수.

0618(화) -- 요구분석 = 자율양식

	// 폭포수 모델(Top Down) = 순차적으로 진행. 고전적이고 전형적, 제일 많이 사용됨. 안전,완성적

- 1. 요구 ----------------| - 정보수집
     사항 		  |   요구분석 = 사용자가 원하는 프로그램이 맞는지 체크, 맞을 경우에만 다음 단계로 진행
- 2. 설계 ----------------| - 시나리오
- 3. 구현 ----------------| - 실질적인 코딩이 이뤄지는 부분. IEEE-STD-830
- 4. 테스트 --------------|  
- 5. 배포/유지보수 -------| 

	// 애자일 모델(Bottom Up) = 폭포수 모델과 비교했을 때 역순으로 진행.
	// 등등 많은 모델이 있으니 한번 찾아볼 것.

1주차 = 개인별로 소프트웨어 개발 프로세스 제출 (30장 내외) = BIT안양지점에 관한 LMS시스템(학습관리)
	* 요구사항정의 / 분석 / 설계 / 구현 (시나리오 작성="글"로 작성)
	* USECASE(+USECASE명세서) 시나리오를 간략하게 이미지화 한 것. 시나리오 당 = 1장의 이미지.
		= 약속된 기호나 이미지 등을 활용함.
	* 요구명세서 = 계약서 무엇을 원하는지 어디까지를 원하는지 등을 기록한 것.

0619(수) -- USECASE = 자율양식

	// 시나리오를 이해하기 쉽게 하기 위해서 약속된 심볼을 통해서 그림으로 만든 것.
	// USECASE로도 복잡하다면 각 부분을 세분화해서 표현하는 것도 가능하다.
	// 심볼 : 라인,액터, 유스케이스, 시스템
	// 액터 = 시스템과 상호작용을 하는 시스템외부의 존재이다.
		// 입력, 출력 등의 주체가 될 수 있다.
		// 이러한 액터는 사람이 될 수도 있지만 사물이 될 수도 있다.
		// 액터에서 액터로는 상속의 개념 (부모 <--- 자식)(부모와 자식간의 화살표 방향은 역방향)
	// 유스케이스 = 개발 대상이 되는 시스템이 제공하는 개별적인 기능을 뜻함
		// 여기서의 기능이라는 것은 추상화된 기능을 말하는 것이다.
		ㅡㅡㅡ  실선 : 점선을 제외한 것은 모두 실선으로 표현하는 것이 표준이나 이해를 위한 것이므로 좀 더 이해가 쉽게 표현하는 것도 가능하다.
		ㅡㅡㅡ> 화살표가 있는 실선
		------> 점선 (include / extend)가 있다.
			포함(include)	= (정방향) 다른 유스케이스에서 기존의 유스케이스를 재사용하는 관계
					= 유스케이스를 수행할 때 다른 유스케이스가 반드시 수행되는 것.
					= 여러 유스케이스에서 공통적으로 발견되는 기능을 표현
			확장(extend)	= (역방향) 기존의 유스케이스에 진행단계를 추가하여 새로운 유스케이스를 만들어내는 관계
					= 상위 유스케이스로부터 어떠한 특정 조건에 의해 수행되는 것.
					= 한 유스케이스에서 추가되거나 확장된 기능을 표현